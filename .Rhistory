levels(adult$education)
numlevels<-length(levels(adult$education))
adult$education<-factor(adult$education,levels(adult$education)[c(4,5,6,7,1,2,3,8:numlevels)])
levels(adult$education)
model <- glm(data=adult, formula=X50k ~ age+education+sex, family = binomial())
model
paste("Un hombre tiene ",exp(model$coefficients["sex Male"]),"veces más posibilidades de ganar más de 50k$ que una mujer")
paste("Cada año que pasa hay ",exp(model$coefficients["age"]),"veces más posibilidades de ganar más de 50k$")
paste("Una persona con Master tiene ",exp(model$coefficients["education Masters"]),"veces más posibilidades de ganar más de 50k$ que alguien con solo 1st-4th")
adult_master<-subset(adult,education==" Masters")
model <- glm(data=adult_master, formula=X50k ~ age+sex, family = binomial())
summary(model)
model <- glm(data=adult_master, formula=X50k ~ age*sex, family = binomial())
summary(model)
confint(model)
M <- matrix(c(425,1,10,627),ncol=2, byrow = TRUE)
colnames(M)<-c('pos','neg')
rownames(M)<-c('pos','neg')
caret::confusionMatrix(M)
# PPA (positive percent agreement)
paste("Sensibilidad (PPA):", 425/(425+10)*100)
# NPA (negative percent agreement)
paste("Especificidad (NPA):", 627/(627+1))
# En el test lo llaman precisión pero nosotros lo hemos llamado exactitud
# https://es.wikipedia.org/wiki/Precisi%C3%B3n_y_exactitud#En_clasificaci%C3%B3n_binaria
# OPA (Overall Percent Agreement)
paste("Exactitud (OPA):",(425+627)/1063*100)
binom.test(425+627,1063)
#Positive Prediction Value (PPV)
paste("Precisión test positivo:",425/(425+1)*100)
#Negative Prediction Value (PPV)
paste("Precisión test negativo:",627/(627+10)*100)
p_testOK_covid = M[1,1]/sum(M[,1])
p_testOK_sano = M[1,2]/sum(M[,2])
p_covid = 10/1000
p_sano = 1-p_covid
p_testOK = p_testOK_covid*p_covid+p_testOK_sano*p_sano
p_covid_testOK = p_testOK_covid*p_covid/p_testOK
p_covid_testOK
paste("La probabilidad de tener COVID si el test es positivo es del ",round(p_covid_testOK*100,2),"%", sep='')
p_covid = 435/1063
p_testOK = p_testOK_covid*p_covid+p_testOK_sano*p_sano
p_covid_testOK = p_testOK_covid*p_covid/p_testOK
p_covid_testOK
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
umbral<- 0
win_pred  <-predict(model_win,data_test)
df_preds<-data.frame(pred=win_pred,
tipo_pred=factor(ifelse(win_pred > umbral, "SI", "NO")),
tipo_real=data_test$win)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]
M<-table(df_preds$tipo_real,df_preds$tipo_pred)
M
dfROC<-data.frame(th=unique(df_preds$pred),tp=NA,fp=NA,model="model1")
calctp_fp<-function(y_predict,y_real,th){
y_est<-ifelse(y_predict<th,0,1)
M<-table(y_real,y_est)
#print(M)
if (ncol(M)==2 && nrow(M)==2){
truePositive<-M[2,2]/(M[2,2]+M[2,1])
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
c(tp=truePositive,fp=falsePositive)
}else{
c(tp=NA,fp=NA)
}
}
for (i in 1:nrow(dfROC)){
v<-calctp_fp(df_preds$tipo_pred,df_preds$tipo_real,th=dfROC$th[i])
dfROC$tp[i]<-v["tp"]
dfROC$fp[i]<-v["fp"]
}
ggplot(data=dfROC,aes(x=fp,y=tp))+geom_path()
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
umbral<- 0
win_pred  <-predict(model_win,data_test)
df_preds<-data.frame(pred=win_pred,
tipo_pred=factor(ifelse(win_pred > umbral, "SI", "NO")),
tipo_real=data_test$win)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]
M<-table(df_preds$tipo_real,df_preds$tipo_pred)
M
dfROC<-data.frame(th=unique(df_preds$pred),tp=NA,fp=NA,model="model1")
calctp_fp<-function(y_predict,y_real,th){
y_est<-ifelse(y_predict<th,0,1)
M<-table(y_real,y_est)
#print(M)
if (ncol(M)==2 && nrow(M)==2){
truePositive<-M[2,2]/(M[2,2]+M[2,1])
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
c(tp=truePositive,fp=falsePositive)
}else{
c(tp=NA,fp=NA)
}
}
for (i in 1:nrow(dfROC)){
v<-calctp_fp(df_preds$pred,df_preds$tipo_real,th=dfROC$th[i])
dfROC$tp[i]<-v["tp"]
dfROC$fp[i]<-v["fp"]
}
ggplot(data=dfROC,aes(x=fp,y=tp))+geom_path()
model_win<-glm(data = data_train,formula=win ~ Total,family=binomial(link='logit'))
model_win
model_win<-glm(data = data_train,formula=win ~ level+Total,family=binomial(link='logit'))
model_win
model_win<-glm(data = data_train,formula=win ~ kata+level+Total,family=binomial(link='logit'))
model_win
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
umbral<- 0
win_pred  <-predict(model_win,data_test)
df_preds<-data.frame(pred=win_pred,
tipo_pred=factor(ifelse(win_pred > umbral, "SI", "NO")),
tipo_real=data_test$win)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]
M<-table(df_preds$tipo_real,df_preds$tipo_pred)
M
dfROC<-data.frame(th=unique(df_preds$pred),tp=NA,fp=NA,model="model1")
calctp_fp<-function(y_predict,y_real,th){
y_est<-ifelse(y_predict<th,0,1)
M<-table(y_real,y_est)
#print(M)
if (ncol(M)==2 && nrow(M)==2){
truePositive<-M[2,2]/(M[2,2]+M[2,1])
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
c(tp=truePositive,fp=falsePositive)
}else{
c(tp=NA,fp=NA)
}
}
for (i in 1:nrow(dfROC)){
v<-calctp_fp(df_preds$pred,df_preds$tipo_real,th=dfROC$th[i])
dfROC$tp[i]<-v["tp"]
dfROC$fp[i]<-v["fp"]
}
ggplot(data=dfROC,aes(x=fp,y=tp))+geom_path()
gc()
model_win<-glm(data = data_train,formula=win ~ kata+level+Total,family=binomial(link='logit'))
data_Kata <- read.csv('karate_competition.csv', sep = ',')
options(repr.plot.height = 4,repr.plot.width = 6,repr.plot.res = 300)
data_Kata
# Convertir a Factor algunas columnas
library(dplyr)
data_Kata$level <- as.factor(data_Kata$level)
data_Kata$kata <- as.factor(data_Kata$kata)
data_Kata$win <- as.factor(data_Kata$win)
data_Kata$Gender <- as.factor(data_Kata$Gender)
summary(data_Kata)
# Meda de puntuaciones por años
mean_by_year <- aggregate(Total ~ year, data = data_Kata , FUN = mean)
mean_by_year
library(ggplot2)
ggplot(mean_by_year, aes(x = year, y = Total)) +
geom_line(color = "red") +
geom_point(color = "yellow") +
labs(title = "Evolución de la Media por Años del Total de Puntos",
x = "Año",
y = "Media Total de Puntos") +
theme_minimal()
# Medias de puntuaciones por katas
mean_by_kata <- aggregate(Total ~ kata, data = data_Kata, FUN = mean)
mean_by_kata
library(ggplot2)
ggplot(data_Kata, aes(x = kata, y = Total, fill = kata))+
geom_boxplot() +
scale_fill_hue() +
labs(title = "Boxplot de Puntos por Katas",
x = "Katas",
y = "Total de Puntos") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Número total de combates
total_combates <- nrow(data_Kata)
paste('El número total de combates realizados en estos años: ', total_combates)
# Número de victorias
victory <- sum(data_Kata$win == 'SI')
paste('El número de vitorias en estos años: ', victory)
# Porcentaje de exito
binom.test(victory, total_combates)
# Porcentaje de mujeres
female <- sum(data_Kata$Gender == 'Female')
binom.test(female, total_combates)
library(ggplot2)
ggplot(data_Kata, aes(x = Gender, y = Total, fill = Gender))+
geom_boxplot() +
scale_fill_hue() +
labs(title = "Boxplot de Puntos por sexo",
x = "sexo",
y = "Total de Puntos") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
shapiro.test(data_Kata$Total)
kruskalTestKata <- kruskal.test(Total ~ kata, data_Kata)
kruskalTestKata
kruskalTestGender <- kruskal.test(Total ~ Gender, data_Kata)
kruskalTestGender
set.seed(12345)
idx <- sample(1:nrow(data_Kata),nrow(data_Kata)*0.7)
data_train <- data_Kata[idx,] # DATA FRAME DE TRAINING
data_test <- data_Kata[-idx,] # DATA FRAME DE TESTING
data_train
data_test
model_win<-glm(data = data_train,formula=win ~ kata+level+Total,family=binomial(link='logit'))
model_win
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
umbral<- 0
win_pred  <-predict(model_win,data_test)
df_preds<-data.frame(pred=win_pred,
tipo_pred=factor(ifelse(win_pred > umbral, "SI", "NO")),
tipo_real=data_test$win)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]
M<-table(df_preds$tipo_real,df_preds$tipo_pred)
M
dfROC<-data.frame(th=unique(df_preds$pred),tp=NA,fp=NA,model="model1")
calctp_fp<-function(y_predict,y_real,th){
y_est<-ifelse(y_predict<th,0,1)
M<-table(y_real,y_est)
#print(M)
if (ncol(M)==2 && nrow(M)==2){
truePositive<-M[2,2]/(M[2,2]+M[2,1])
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
c(tp=truePositive,fp=falsePositive)
}else{
c(tp=NA,fp=NA)
}
}
for (i in 1:nrow(dfROC)){
v<-calctp_fp(df_preds$pred,df_preds$tipo_real,th=dfROC$th[i])
dfROC$tp[i]<-v["tp"]
dfROC$fp[i]<-v["fp"]
}
ggplot(data=dfROC,aes(x=fp,y=tp))+geom_path()
model_win<-glm(data = data_train,formula=win ~ kata+level+Total,family=binomial
model_win
model_win<-glm(data = data_train,formula=win ~ kata+level+Total,family=binomial)
model_win
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
umbral<- 0
win_pred  <-predict(model_win,data_test)
df_preds<-data.frame(pred=win_pred,
tipo_pred=factor(ifelse(win_pred > umbral, "SI", "NO")),
tipo_real=data_test$win)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]
M<-table(df_preds$tipo_real,df_preds$tipo_pred)
M
dfROC<-data.frame(th=unique(df_preds$pred),tp=NA,fp=NA,model="model1")
calctp_fp<-function(y_predict,y_real,th){
y_est<-ifelse(y_predict<th,0,1)
M<-table(y_real,y_est)
#print(M)
if (ncol(M)==2 && nrow(M)==2){
truePositive<-M[2,2]/(M[2,2]+M[2,1])
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
c(tp=truePositive,fp=falsePositive)
}else{
c(tp=NA,fp=NA)
}
}
for (i in 1:nrow(dfROC)){
v<-calctp_fp(df_preds$pred,df_preds$tipo_real,th=dfROC$th[i])
dfROC$tp[i]<-v["tp"]
dfROC$fp[i]<-v["fp"]
}
ggplot(data=dfROC,aes(x=fp,y=tp))+geom_path()
# Convertir a Factor algunas columnas
library(dplyr)
data_Kata$level <- as.factor(data_Kata$level)
data_Kata$kata <- as.factor(data_Kata$kata)
data_Kata$win <- as.factor(data_Kata$win)
data_Kata$Gender <- as.factor(data_Kata$Gender)
data_Kata[which(data_Kata$kata == 'jion')]<- 'Jion'
# Convertir a Factor algunas columnas
library(dplyr)
data_Kata$level <- as.factor(data_Kata$level)
data_Kata$kata <- as.factor(data_Kata$kata)
data_Kata$win <- as.factor(data_Kata$win)
data_Kata$Gender <- as.factor(data_Kata$Gender)
data_Kata$kata[which(data_Kata$kata == 'jion')]<- 'Jion'
summary(data_Kata)
# Meda de puntuaciones por años
mean_by_year <- aggregate(Total ~ year, data = data_Kata , FUN = mean)
mean_by_year
library(ggplot2)
ggplot(mean_by_year, aes(x = year, y = Total)) +
geom_line(color = "red") +
geom_point(color = "yellow") +
labs(title = "Evolución de la Media por Años del Total de Puntos",
x = "Año",
y = "Media Total de Puntos") +
theme_minimal()
# Medias de puntuaciones por katas
mean_by_kata <- aggregate(Total ~ kata, data = data_Kata, FUN = mean)
mean_by_kata
library(ggplot2)
ggplot(data_Kata, aes(x = kata, y = Total, fill = kata))+
geom_boxplot() +
scale_fill_hue() +
labs(title = "Boxplot de Puntos por Katas",
x = "Katas",
y = "Total de Puntos") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Número total de combates
total_combates <- nrow(data_Kata)
paste('El número total de combates realizados en estos años: ', total_combates)
# Número de victorias
victory <- sum(data_Kata$win == 'SI')
paste('El número de vitorias en estos años: ', victory)
# Porcentaje de exito
binom.test(victory, total_combates)
# Porcentaje de mujeres
female <- sum(data_Kata$Gender == 'Female')
binom.test(female, total_combates)
library(ggplot2)
ggplot(data_Kata, aes(x = Gender, y = Total, fill = Gender))+
geom_boxplot() +
scale_fill_hue() +
labs(title = "Boxplot de Puntos por sexo",
x = "sexo",
y = "Total de Puntos") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
shapiro.test(data_Kata$Total)
kruskalTestKata <- kruskal.test(Total ~ kata, data_Kata)
kruskalTestKata
kruskalTestGender <- kruskal.test(Total ~ Gender, data_Kata)
kruskalTestGender
set.seed(12345)
idx <- sample(1:nrow(data_Kata),nrow(data_Kata)*0.7)
data_train <- data_Kata[idx,] # DATA FRAME DE TRAINING
data_test <- data_Kata[-idx,] # DATA FRAME DE TESTING
data_train
data_test
model_win<-glm(data = data_train,formula=win ~ kata+level+Total,family=binomial)
model_win
library(ROCR)
options(repr.plot.height=4,repr.plot.width=6)
umbral<- 0
win_pred  <-predict(model_win,data_test)
df_preds<-data.frame(pred=win_pred,
tipo_pred=factor(ifelse(win_pred > umbral, "SI", "NO")),
tipo_real=data_test$win)
df_preds<-df_preds[order(df_preds$pred, decreasing=FALSE),]
M<-table(df_preds$tipo_real,df_preds$tipo_pred)
M
dfROC<-data.frame(th=unique(df_preds$pred),tp=NA,fp=NA,model="model1")
calctp_fp<-function(y_predict,y_real,th){
y_est<-ifelse(y_predict<th,0,1)
M<-table(y_real,y_est)
#print(M)
if (ncol(M)==2 && nrow(M)==2){
truePositive<-M[2,2]/(M[2,2]+M[2,1])
falsePositive<-M[1,2]/(M[1,2]+M[1,1])
c(tp=truePositive,fp=falsePositive)
}else{
c(tp=NA,fp=NA)
}
}
for (i in 1:nrow(dfROC)){
v<-calctp_fp(df_preds$pred,df_preds$tipo_real,th=dfROC$th[i])
dfROC$tp[i]<-v["tp"]
dfROC$fp[i]<-v["fp"]
}
ggplot(data=dfROC,aes(x=fp,y=tp))+geom_path()
umbral <- 0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
ggplot(data_test,aes(y=Total,color=win))+geom_point(size=3)+
geom_abline(intercept = (-betalg[1])/betalg[3],slope = -betalg[2]/betalg[3], color="blue", linetype="dashed")+
geom_abline(intercept = (umbral-betalg[1])/betalg[3],slope = -betalg[2]/betalg[3], color="blue" )
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.01
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.3
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.4
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
model_win<-glm(data = data_train,formula=win ~ level+Total,family=binomial)
model_win
umbral <- -0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred < umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- 0
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.1
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
umbral <- -0.2
win_pred  <- predict(model_win,data_test)
y_est=factor(ifelse(win_pred > umbral,'SI','NO'))
M = table(real=data_test$win,elegimos=y_est)
M
library(ggplot2)
ggplot(data_Kata, aes(x = Level, y = Total, fill = Level))+
geom_boxplot() +
scale_fill_hue() +
labs(title = "Boxplot de Puntos por tipo competición",
x = "Tipo Competición",
y = "Total de Puntos") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ggplot(data_Kata, aes(x = level, y = Total, fill = level))+
geom_boxplot() +
scale_fill_hue() +
labs(title = "Boxplot de Puntos por tipo competición",
x = "Tipo Competición",
y = "Total de Puntos") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
kruskalTestCompetition <- kruskal.test(Total ~ level, data_Kata)
kruskalTestCompetition
